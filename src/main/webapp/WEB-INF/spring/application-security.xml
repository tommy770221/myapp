<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	         xmlns="http://www.springframework.org/schema/security"
	         xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                             http://www.springframework.org/schema/beans/spring-beans.xsd
	                             http://www.springframework.org/schema/security 
	                             http://www.springframework.org/schema/security/spring-security.xsd">

    <debug></debug>
        <!-- HTTP security configurations -->
    <!-- token 驗證 -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		use-expressions="true" entry-point-ref="clientAuthenticationEntryPoint">

		<anonymous enabled="false" />
		<intercept-url pattern="/oauth/token" access="hasRole('ROLE_CLIENT')" />

		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<!-- 讓/oauth/authorize一定要先讓使用者認證過 -->
	<http pattern="/oauth/authorize" use-expressions="true" auto-config="true">
		<form-login login-processing-url="/loginApp"
			login-page="/login" authentication-failure-url="/login?login_error=t" />
		<logout logout-url="/oauthlogout" />
		<intercept-url pattern="/oauth/authorize" access="hasRole('ROLE_USER')" />
	</http> 

	<!-- OAuth認證的EndpointFilter 它的認證來源是clientAuthenticationManager -->
	<beans:bean id="clientCredentialsTokenEndpointFilter"   	
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">	
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>
     
    <http pattern="/v1.0/**" create-session="never"
		authentication-manager-ref="clientAuthenticationManager"
		use-expressions="true" entry-point-ref="clientAuthenticationEntryPoint">
	
		<anonymous enabled="false" />
		<intercept-url pattern="/v1.0/**"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER'))" />
	
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>
	
	<http pattern="/rest/**" create-session="never"
		authentication-manager-ref="clientAuthenticationManager"
		use-expressions="true" entry-point-ref="clientAuthenticationEntryPoint">
	
		<anonymous enabled="false" />
		<intercept-url pattern="/rest/**"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER'))" />
	
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>
    
	<http use-expressions="true" auto-config='true' disable-url-rewriting="false">
		<intercept-url pattern="/login" access="permitAll"/>
		<intercept-url pattern="/register**" access="hasRole('ROLE_USER')"/>
		<intercept-url pattern="/AdminLTE/**" access="permitAll"/>
		<intercept-url pattern="/page/**" access="hasRole('ROLE_USER')"/>
		<form-login login-page="/login" 
		            login-processing-url="/loginApp"
		            username-parameter="email"
			        password-parameter="password"
			        authentication-success-handler-ref="loginSuccessHandler" 
                    authentication-failure-url="/loginFail?auth=fail"
			        />
		<logout logout-url="/j_spring_security_logout"/>
	</http>

	<authentication-manager  alias="authenticationManager">
		<authentication-provider>		  
		    <password-encoder hash='md5'>
                <salt-source user-property="username"/>
            </password-encoder> 
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select email as username,PASSWORD as password, enabled  from user where email=?"
				authorities-by-username-query="select u.email as username, r.name as role from user u left join user_roles ur on u.id=ur.userId left join role r on ur.roleId=r.roleId where u.email =?  " />
		</authentication-provider>
	</authentication-manager>
	
		<!-- Spring Security -->
	<beans:bean id="loginSuccessHandler" class="com.tommy.handler.login.LoginSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/manu" />
	</beans:bean>
	
<!-- 	 <beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> -->
<!--         <beans:property name="userDetailsService" ref="userDetailsService"/> -->
<!--     </beans:bean> -->
     
     
<!--     <beans:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager"> -->
<!--         <beans:property name="providers"> -->
<!--             <beans:list> -->
<!--                 <beans:ref bean="daoAuthenticationProvider" /> -->
<!--             </beans:list> -->
<!--         </beans:property> -->
<!--     </beans:bean> -->
     
<!--     <authentication-manager erase-credentials="false"> -->
<!--         <authentication-provider user-service-ref="userDetailsService"> -->
<!--         </authentication-provider> -->
<!--     </authentication-manager> -->

  


</beans:beans>